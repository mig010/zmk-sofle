#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    new_behavior: new_behavior {
        compatible = "zmk,behavior-hold-tap";
        label = "NEW_BEHAVIOR";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <159>;
        flavor = "tap-preferred";
        hold-trigger-on-release;
        hold-trigger-key-positions = <57 59>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <35 59>;
        };
    };

    macros {
        ciw: ciw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp I &kp W>;
            label = "ciw";
        };

        viw: viw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp I &kp W>;
            label = "VIW";
        };

        yiw: yiw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp I &kp W>;
            label = "YIW";
        };

        ten: ten {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1 &kp N0>;
            label = "ten";
        };

        diw: diw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp I &kp W>;
            label = "DIW";
        };

        twenty: twenty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2 &kp N0>;
            label = "TWENTY";
        };

        ciW: ciW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp I &kp LS(W)>;
            label = "CIW";
        };

        viW: viW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp I &kp LS(W)>;
            label = "VIW";
        };

        yiW: yiW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp I &kp LS(W)>;
            label = "YIW";
        };

        diW: diW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp I &kp LS(W)>;
            label = "DIW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        kuru {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4                         &kp N5                           &kp LEFT_SHIFT       &kp N6               &kp N7     &kp N8     &kp N9           &kp N0         &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp F         &kp P                          &kp B                            &kp DOWN_ARROW       &kp J                &kp L      &kp U      &kp Y            &kp SEMICOLON  &kp BSLH
&kp CAPS    &kp A      &kp R         &kp S         &kp T                          &kp G                            &kp LG(LEFT_ARROW)   &kp M                &kp N      &kp E      &kp I            &kp O          &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C         &kp D                          &kp V                            &kp LG(RIGHT_ARROW)  &kp K                &kp H      &kp COMMA  &kp DOT          &kp FSLH       &kp ENTER
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &new_behavior 3 LG(BACKSPACE)  &new_behavior 1 LA(BACKSPACE)    &mkp LCLK            &new_behavior 2 RET  &kp SPACE  &mo 2      &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        all {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9      &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME    &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &mo 6            &trans      &kp ESCAPE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11     &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &kp LC(F)        &trans           &trans      &trans      &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        numbers {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6        &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &trans        &trans        &kp N5        &trans        &trans          &mmv MOVE_DOWN   &trans        &trans  &ten        &kp F12    &kp UNDER    &kp PLUS
&trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5          &mmv MOVE_LEFT   &kp NUMBER_6  &kp N7  &kp N8      &kp N9     &kp N0       &kp RBRC
&trans     &sys_reset    &trans        &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans        &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans        &trans        &trans        &kp LC(W)       &mkp LCLK        &trans        &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        vim {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans            &trans      &trans
&trans  &trans  &trans  &cib    &trans  &trans    &trans  &trans  &trans  &ciB    &trans            &trans      &trans
&trans  &viw    &diw    &ciw    &yiw    &trans    &trans  &trans  &kp J   &kp K   &kp LC(NUMBER_6)  &kp PERIOD  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans            &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mo 4   &trans  &trans  &trans            &trans
            >;
        };

        vimSentences {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp GRAVE  &trans  &trans  &trans
&trans  &viW    &diW    &ciW    &yiW    &trans    &trans  &trans  &yip    &cip       &dip    &vip    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &mo 5     &trans  &trans  &trans  &trans     &trans  &trans
            >;
        };

        vimMotion {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp B   &kp W   &kp E   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        browser {
            bindings = <
&trans  &trans             &trans  &trans             &trans             &trans               &trans  &trans  &trans  &trans     &trans     &trans  &trans
&trans  &trans             &trans  &kp LG(W)          &kp C              &trans               &trans  &trans  &trans  &trans     &trans     &trans  &trans
&trans  &kp LC(LA(LS(F)))  &trans  &kp LC(LA(LS(B)))  &kp LC(LA(LS(P)))  &kp LS(LA(LC(W)))    &trans  &trans  &trans  &kp LS(E)  &kp LS(R)  &trans  &trans
&trans  &trans             &trans  &trans             &trans             &trans               &trans  &trans  &trans  &trans     &trans     &trans  &trans
&trans  &trans             &trans  &trans             &trans             &trans               &trans  &trans  &trans  &trans     &trans     &trans
            >;
        };

        raycast {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        cli {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        figma {
            bindings = <
&trans  &trans                   &trans                  &trans                    &trans                      &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                   &trans                  &to 0                     &trans                      &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &new_behavior 11 DELETE  &new_behavior 10 LG(Z)  &mt LEFT_SHIFT LA(SLASH)  &mt LCTRL LS(SLASH)         &mt LS(LG(Z)) LS(X)       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                   &trans                  &trans                    &trans                      &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                   &trans                  &trans                    &new_behavior 13 LS(LG(P))  &new_behavior 12 LG(C)    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        figmaShortcuts {
            bindings = <
&trans  &trans         &trans  &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans  &kp LA(LG(K))  &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(LG(C))  &trans  &kp LG(G)      &kp LG(LA(G))  &kp LG(D)        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans  &trans         &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans         &trans  &trans         &kp LA(LG(C))  &kp LA(LG(V))    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        figmaAliases {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp L   &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp R   &kp O   &kp T             &kp LS(LG(K))       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        figmaOneFive {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &kp N5        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        figmaSixZero {
            bindings = <
&trans  &trans        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans  &kp N0  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
